// Generated by CoffeeScript 1.7.1
(function() {
  var SDK_CLIENT_VERSION, V1Server, base64, browserAjaxRequest, et, querystring, url;

  et = require('elementtree');

  url = require('url');

  querystring = require('querystring');

  base64 = require('./base64');

  SDK_CLIENT_VERSION = "0.3.1";

  browserAjaxRequest = function(method, path, auth, callback) {
    var req;
    if (typeof this.XMLHttpRequest === "undefined") {
      this.XMLHttpRequest = function() {
        var error;
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (_error) {
          error = _error;
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (_error) {
          error = _error;
        }
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (_error) {
          error = _error;
          throw new Error("This browser does not support XMLHttpRequest.");
        }
      };
    }
    req = new this.XMLHttpRequest(method, path);
    req.addEventListener('readystatechange', function() {
      if (req.readyState === 4) {
        if (req.status === 200 || req.status === 304) {
          return callback(req.responseText);
        } else {
          return console.log('Error loading data. Request.readyState = ' + req.readyState);
        }
      }
    });
    return function() {
      req.open(method, path, false);
      req.setRequestHeader("Authorization", "Basic " + base64.btoa(auth));
      return req.send();
    };
  };

  module.exports = {
    V1Server: V1Server = (function() {
      function V1Server(hostname, instance, username, password, port, protocol, useBrowserHttpStack) {
        this.hostname = hostname != null ? hostname : 'localhost';
        this.instance = instance != null ? instance : 'VersionOne.Web';
        this.username = username != null ? username : 'admin';
        this.password = password != null ? password : 'admin';
        this.port = port != null ? port : 80;
        this.protocol = protocol != null ? protocol : 'http';
        this.useBrowserHttpStack = useBrowserHttpStack != null ? useBrowserHttpStack : null;
        return this;
      }

      V1Server.prototype.build_url = function(path, query) {
        if (query == null) {
          query = void 0;
        }
        url = '/' + this.instance + path;
        if (query != null) {
          url = url + '?' + querystring.stringify(query);
        }
        return url;
      };

      V1Server.prototype.httplibs = {
        "http": require('http'),
        "https": require('https'),
        "http://": require('http'),
        "https://": require('https')
      };

      V1Server.prototype.fetch = function(options, callback) {
        if (this.useBrowserHttpStack == null) {
          this.useBrowserHttpStack = typeof XMLHttpRequest !== "undefined";
        }
        if (this.useBrowserHttpStack) {
          return this.fetch_browser(options, callback);
        } else {
          if (this.httplib == null) {
            this.httplib = this.httplibs[this.protocol];
          }
          return this.fetch_node(options, callback);
        }
      };

      V1Server.prototype.fetch_browser = function(options, callback) {
        var req_options, request;
        url = this.build_url(options.path, options.query);
        req_options = {
          hostname: this.hostname,
          port: this.port,
          method: (options.postdata != null ? 'POST' : 'GET'),
          path: url,
          auth: this.username + ':' + this.password
        };
        request = browserAjaxRequest(req_options.method, this.protocol + "://" + req_options.hostname + ":" + req_options.port + "/" + req_options.path, req_options.auth, function(data) {
          return callback(void 0, null, data);
        });
        return request();
      };

      V1Server.prototype.fetch_node = function(options, callback) {
        var req_options, request, request_done;
        url = this.build_url(options.path, options.query);
        req_options = {
          hostname: this.hostname,
          port: this.port,
          method: (options.postdata != null ? 'POST' : 'GET'),
          path: url,
          auth: this.username + ':' + this.password,
          headers: {
            'user-agent': 'VersionOne JS SDK Client/5.0 ' + SDK_CLIENT_VERSION
          }
        };
        request_done = function(response) {
          var alldata;
          alldata = [];
          response.on('data', function(data) {
            return alldata.push(data);
          });
          return response.on('end', function() {
            var body;
            body = alldata.join('');
            if (response.statusCode !== 200) {
              return callback(body);
            } else {
              return callback(void 0, response, body);
            }
          });
        };
        request = this.httplib.request(req_options, request_done);
        request.on('error', callback);
        if (options.postdata != null) {
          request.write(options.postdata);
        }
        return request.end();
      };

      V1Server.prototype.get_xml = function(options, callback) {
        var mycallback;
        mycallback = function(error, response, body) {
          var xmltree;
          if (error != null) {
            return callback(error);
          }
          xmltree = et.parse(body).getroot();
          return callback(void 0, xmltree);
        };
        return this.fetch(options, mycallback);
      };

      V1Server.prototype.get_meta_xml = function(options, callback) {
        var path;
        path = '/meta.v1/' + options.asset_type_name;
        return this.get_xml({
          path: path
        }, callback);
      };

      V1Server.prototype.get_asset_xml = function(options, callback) {
        var path;
        path = '/rest-1.v1/Data/' + options.asset_type_name + '/' + options.id;
        return this.get_xml({
          path: path
        }, callback);
      };

      V1Server.prototype.get_query_xml = function(options, callback) {
        var name, path, query, value, wherestrs;
        path = '/rest-1.v1/Data/' + options.asset_type_name;
        query = {};
        wherestrs = [];
        if (options.where != null) {
          wherestrs = wherestrs.concat((function() {
            var _ref, _results;
            _ref = options.where;
            _results = [];
            for (name in _ref) {
              value = _ref[name];
              _results.push(name + '="' + value + '"');
            }
            return _results;
          })());
        }
        if (options.wherestr != null) {
          wherestrs = wherestrs.concat(options.wherestr);
        }
        query['where'] = wherestrs.join('&');
        if (options.select != null) {
          query['sel'] = options.select.join(',');
        }
        return this.get_xml({
          path: path,
          query: query
        }, callback);
      };

      V1Server.prototype.execute_operation = function(options, callback) {
        var path, query;
        path = '/rest-1.v1/Data/' + options.asset_type_name + '/' + options.id;
        query = {
          op: options.opname
        };
        return this.get_xml({
          path: path,
          query: query,
          postdata: ''
        }, callback);
      };

      V1Server.prototype.create_asset = function(options, callback) {
        var body, path, query;
        query = void 0;
        if (options.context_oid != null) {
          query = {
            ctx: options.context_oid
          };
        }
        path = '/rest-1.v1/Data/' + options.asset_type_name;
        body = et.tostring(options.xmldata);
        return this.get_xml({
          path: path,
          query: query,
          postdata: body
        }, callback);
      };

      V1Server.prototype.update_asset = function(options, callback) {
        var newdata, path;
        newdata = et.tostring(options.xmldata);
        path = '/rest-1.v1/Data/' + options.asset_type_name + '/' + options.id;
        return this.get_xml({
          path: path,
          postdata: newdata
        });
      };

      return V1Server;

    })()
  };

}).call(this);
